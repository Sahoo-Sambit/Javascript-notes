......................................................Loops in Arrays...........................................................
for-of loop   -> Used to access values

example:    const arr = [1,2,3,4];
for (const element of arr){
  console.log(element)      //"1" 
                            //"2" 
                            //"3" 
                            //"4"
}

for-in loop     -> Used to access index

example:    const arr = [10,20,30,40];
for (const index in arr){
   console.log(index, arr[index])   //0  10
                                    //1  20
                                    //2  30
                                    //3  40
}
We can also access values using indices.

for-each loop   -> Higher order function, passing function to every index of array. It takes in both array element value and its index as parameter.

example:    var arr = [10,20,30,40]
arr.forEach((a,b,c,d)=>{           // It takes in value, index, array as parameter. c,d are not required
    console.log(a,b,c,d);          // 10 0 [10,20,30,40] undefined
                                   // 20 1 [10,20,30,40] undefined
                                   // 30 2 [10,20,30,40] undefined
                                   // 40 3 [10,20,30,40] undefined
})

................................................................................................................................

Higher-Order Functions
-> A function which takes in another function as arguement or returns a function.
forEach(), .reduce(), .map(), .filter(), etc. are higher order functions.

e.g -> arr.forEach(function); //It is a higher order function
       arr.indexOf(5);        //It is not a higher order function
.................................................................................................................................

Javascript functions are first class objects.
-> They have built-in properties and methods such as .name property, .toString() method
-> They can be passed as arguments and returned from other functions.
-> They can be assigned to variables, array elements, and other objects.

example: 
const originalFunc = (num) => { return num + 2 };

//Re-assign the function to a new variable newFunc
const newFunc = originalFunc;

//Access the function's name property
newFunc.name; //'originalFunc'

//Return the function's body as a string
newFunc.toString();

.......................................Array Destructuring & Spread Operators.....................................................

Array Destructuring:
Array destructuring allows you to extract values from an array and assign them to variables in a single statement.

example:
const numbers = [1, 2, 3];
const [a, b, c] = numbers;
console.log(a, b, c);       // Output: 1 2 3


Spread Operators
->  The spread operator (...) is used to expand an array into individual elements.
->  It performs deep copy (any changes in new array is not reflected to old array).

example:
const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5, 6];
console.log(newNumbers);                  // Output: [1, 2, 3, 4, 5, 6]
console.log(numbers);                     // Output: [1, 2, 3]


map() , filter(), reduce() are ES6 concepts and are higher order functions. Performs Deep copy.

........................................................arr.map() function.......................................................

-> It creates a new array by calling a function for each element of an existing array, and returning the result.
-> The length of the new array created by map() is the same as the length of the original array.
-> The map() method does not modify the original array (deep copy)..
-> It performs changing in property values, generate new values in array from original array.
-> It takes input as values inside array, index of array, array itself.
Example:
var arr=[1,2,3,4,5,6,7,8,9,0]
arr.map((value,index,arr)=>console.log(value,index,arr));

var result=arr.map((number)=>number*5)
console.log(result) //[5, 10, 15, 20, 25, 30, 35, 40, 45,  0]

var arr=[12,22,28,93,1101]
arr.map((value)=>{
    if (value>28) {
        console.log(value);     // 93 1101
    }
});
..................................................................................................................................

............................................................arr.filter()..........................................................

-> It creates a new array containing only the elements of an existing array that satisfy a condition specified by a function.
-> The length of the new array created by filter() can be less than or equal to the length of the original array.
-> It does not modify the original array (deep copy).
-> The function passed to filter() should return a Boolean value indicating whether the corresponding element should be included in the new array 
else empty array will be printed.
-> It takes input as values inside array, index of array, array itself.

Example:
var arr=[1,2,,3,4,5,6,7,8,9,0]
var result=arr.filter((number)=>{number>5})
console.log(result)                             //  it returns empty array
var result=arr.filter((number)=>number>5)
console.log(result)                             //  it returns true all true values satisfying the condition

var arr=[12,22,28,93,1101]
var a = arr.filter((value,index,array)=>{
    return array[index]>25;
});
console.log(a);                             //  [ 28, 93, 1101 ]


.................................................................................................................................


...........................................................arr.reduce()..........................................................

-> This js method is used to reduce an array into a single value by applying a function to each element of array. It performs deep copy.

Steps:
-> The first time that the callback is run there is no "return value of the previous calculation". 
->  If supplied, an initial value may be used in its place. 
->  Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).
->  It takes in argument as accumulator, value, index, array.

Example 1:
var arr=[1,2,3,4,5]
const result= arr.reduce(( accumulator, otherelements)=>{
accumulator  + otherelements;
}, 10)                                        //  10 is the default value assigned to accumulator , if 10 is not assigned, then accumulator = 1.
console.log(result)                           //  10+1+2+3+4+5=25

Example 2:
var a=[1,2,3,4,5]
var res=arr.reduce((number)=> {return number+5})     Wrong !    //Single input is wrong approach
console.log(res)  // 11

var arr=[12,22,28,93,1101]
var a = arr.reduce((total,value,index,array)=>{
    return total + array[index];
});
console.log(a);                       // 1256


.................................................................................................................................

Difference between map and filter
-> Map creates a new array and stores a transformed array using function provided.
-> Filter is used to filter elements from array using conditional statements true or false.

.................................................................................................................................

every() Method
The every() method checks if all array values pass a test.
Returns a boolean value

var arr=[121,22,28,93,1101]
var a = arr.every((value,index,array)=>{
    return  array[index]>18;
});
console.log(a);     // true

some() method
The some() method checks if some array values pass a test.
Returns a boolean value

var arr=[11,2,2,3,1]
var a = arr.some((value,index,array)=>{
    return  array[index]>18;
});
console.log(a);     // false

Convert a string into an array
console.log(Array.from("ABCDEFG"));    // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
console.log("ABCDEFG".split(""));      // ['A', 'B', 'C', 'D', 'E', 'F', 'G']


The entries() method returns an Array Iterator object with key/value pairs:

const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();
for (const x of f) {
    console.log (x);
}


[0, "Banana"]
[1, "Orange"]
[2, "Apple"]
[3, "Mango"]


Array.includes(element); // returns boolean value



