Basically, arguments keyword refers to the object that contains all arguments passed to the function.
It is a array like object. But not an array.

function ArrayList(){
console.log(arguments);   // It prints an array like structure but it is not an array. Array functions won't work here.
}
ArrayList(1,2,3,4,5);

We can convert it to array using :

function ArrayList(){
const values = Array.from(arguments)
console.log(values);          // [1,2,3,4,5]   Successfully converted to array. 

// Performing reduce operations in array.
const sum = values.reduce(function (acc, curr){
  return acc + curr;
},0)
  return sum;                  //  15
}
console.log(ArrayList(1,2,3,4,5));

Similarly, we use ... spread operator in javascript to avoid such confusions using arguments.
It will directly convert all arguments into an array. All array operations can be performed accordingly.


function sumWithArguments(...values){
const sum = values.reduce(function (acc, curr){
  return acc + curr;
},0)
}
console.logsumWithArguments(1,2,3,4,5)

Arrow function vs Normal function
-> Arrow functions can have both explicit and implict return.

let add = (a,b)=>a+b   // Implicit return
console.log(add(2,3))   //  5

let add = (a,b)=>{
  return a+b          // Explicit return
}
console.log(add(2,3))    //  5

-> Arguments is not defined in arrow function while it is in normal function.

function add(){
  return arguments
}
console.log(add(2,3))

let add = ()=>{ console.log(arguments) }
console.log(add(2,3))

-> Object binding using this keyword
Not working on arrow function but works on normal function.
When we call this keyword, it will refer to the current object inside normal function 
but in arrow function this will refer to global Window object.

-> Arrow function is not a constructor unlike normal functions

Call, Apply, Bind

Call method

1.
const user1 = { 
      name: "Sambit", 
      greetUser: function{
      console.log(`Hello, ${this.name}`)
  }
}

const user2 = { 
      name: "Peter",
}

user1.greetUser.call(user2);  // Call will change this reference from object user1 to object user2 
                              // used to borrow function     
                              // Hello, Peter

2.
const user1 = { 
      name: "Sambit", 
}
const user2 = { 
      name: "Peter",
}

function greetUser(city, age){
      console.log(`Hello, ${this.name}. I am from city ${city}. My age is ${age}`)
}

greetUser.call(user1, 'Rourkela', 24)   // Hello, Sambit. I am from city Rourkela. My age is 24
greetUser.call(user2, 'Cuttack', 23)   // Hello, Peter. I am from city Cuttack. My age is 23


Apply method
This method is also similar to call method. But in call method, we pass arguments as individual elements but in apply method, we pass the elements as array.
greetUser.call(user2, ['Cuttack', 23]) is similar to line 95.


Bind method
This method is used to borrow an object from another object.

const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}

let fullName = person.fullName.bind(member);      // fullName is a function storing the member object reference in fullName function
console.log(fullName())    // Hege Nilsen        //  Once we call this fullName() it will return Hege Nilsen 













